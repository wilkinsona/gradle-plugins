= Spring IO Plugin
Rob Winch
:toc:
:toc-placement: preamble
:sectanchors:
:icons: font
:source-highlighter: prettify
:idseparator: -
:idprefix:
:doctype: book

== Overview
Provides additional checks to ensure Spring IO platform compatibility

== Quick Start

See http://repo.spring.io/repo/org/springframework/build/gradle/spring-io-plugin/[repo.spring.io] to determine
the latest available version. Then configure the plugin in your project as follows:

[source,groovy]
----
buildscript {
    repositories {
        maven { url 'https://repo.spring.io/plugins-release' }
    }
    dependencies {
        classpath 'org.springframework.build.gradle:spring-io-plugin:0.0.2.RELEASE'
    }
}

// ...

configure(allprojects) {
    apply plugin: 'spring-io'
    
    // necessary to resolve the Spring IO versions (which may include snapshots)
    repositories {
       maven { url "https://repo.spring.io/libs-snapshot" }
    }

    dependencies {
        springIoVersions 'io.spring.platform:platform-versions:1.0.0.BUILD-SNAPSHOT@properties'
    }
}
----

NOTE: It is unlikely you will want to apply the plugin or snapshot repository to all projects. This is particularly
true if you have sample projects within your project. Instead, you should limit the plugin to modules that are part of
the Spring IO platform.

Now you can run the following:

[source,bash]
----
$ ./gradlew clean springIoCheck
----

This will execute tasks that:

* Check that Spring IO contains versions for all direct dependencies, all transitive dependencies, or both. For more
  information refer to the <<springiodependencyversionmappingcheck, description of the task>>
* Ensure that all dependency exclusions use both the group and the module. For more information refer to
  the <<springioincompleteexcludescheck, description of the task>>
* Verify that certain dependencies are not used and suggest alternatives if they are. For more information
  refer to the <<springioalternativedependenciescheck, description of the task>>

Alternatively, you can run the following:

[source,bash]
----
$ ./gradlew clean springIoCheck -PJDK8_HOME=<jdk8-home> -PJDK7_HOME=<jdk7-home>
----

In addition to the steps listed above this will execute tasks that:

* Run tests against your compiled code using JDK7 and JDK8 and the Spring IO dependency versions. For more information
refer to <<additional-tests, Additional Tests>>

If you would like springIoCheck to be invoked when you run `./gradlew build`, then you can make the check task depend
on springIoCheck as shown below:

[source,groovy]
----
configure(allprojects) {
    apply plugin: 'spring-io'

    // ...

    check.dependsOn springIoCheck
}
----

Typically users will keep the springIoCheck task separate so as to only run the springIoCheck task on the CI server.

== Spring IO dependencies

The plugin creates a new configuration, `springIoTestRuntime`, that contains all of the project's dependencies with
their versions mapped to those that are in the platform. This configuration is used when running the additional
tests. The plugin uses another new configuration, `springIoVersions` to determine the versions. Typically, when
configuring this configuration you will declare a single dependency upon a particular version of Spring IO. For
example:

[source,groovy]
----
dependencies {
    springIoVersions 'io.spring.platform:platform-versions:1.0.0.BUILD-SNAPSHOT@properties'
}
----

You can declare more than one dependency in the `springIoVersions` configuration. In the event of a version being
declared in more than one of the dependencies the last declaration wins. This allows you to override versions to,
for example, help you to home in on the cause of a test failure:

[source,groovy]
----
dependencies {
    springIoVersions 'io.spring.platform:platform-versions:1.0.0.BUILD-SNAPSHOT@properties'
    springIoVersions files('custom-versions.properties')
}
----

You can use Gradle's built-in `dependencies` task to see details of the `springIoTestRuntime` configuration and
the versions that it contains. For example:

[source,bash]
----
$ ./gradlew clean project-name:dependencies --configuration springIoTestRuntime
----

== Additional Tests

One of the goals of the Spring IO platform is to ensure modules work with JDK7 and JDK8 and that they run with specific
versions of dependencies. Applying the plugin will create tests that:

* Ensure that the Spring IO versions of dependencies are used at runtime for the additional test tasks
* Run against the specified JDKs

For example, the following will compile the project with the declared dependency versions and JDK. It will then run all
the tests against JDK7 and JDK8 with the Spring IO dependency versions.

[source,bash]
----
$ ./gradlew springIoCheck -PJDK7_HOME=/opt/java/jdk/Sun/7.0 -PJDK8_HOME=/opt/java/jdk/Sun/8.0
----

NOTE: You can also place JDK8_HOME and JDK7_HOME in your gradle.properties

`JDK8_HOME` is the absolute path to the JDK8 Home and `JDK7_HOME` is the absolute path to the JDK7 Home. The
example above works with the Spring Bamboo environment.

Please note that nothing changes for how your code is actually compiled or consumed by users (dependency changes and
JDK changes only impact the additional tests). Also, if JDK7_HOME and JDK8_HOME are both omitted then no additional test
tasks will be created .

== Sub-tasks

The plugin adds a number of tasks to your build. These are documented below.

=== springIoIncompleteExcludesCheck

This task ensures that any dependency exclusions that are done use both the group and the module because otherwise the
dependency will not be excluded in the generated pom.xml file. For example the following is not allowed because it only
excludes the module:

[source,groovy]
----
dependencies {
    compile('org.springframework:spring-core:3.2.0.RELEASE') {
        exclude module: 'commons-logging'
    }
}
----

the following is not allowed because it only excludes the group:

[source,groovy]
----
dependencies {
    compile('org.springframework:spring-core:3.2.0.RELEASE') {
        exclude group: 'commons-logging'
    }
}
----

the following is allowed because it excludes both the group and the module:

[source,groovy]
----
dependencies {
	compile('org.springframework:spring-core:3.2.0.RELEASE') {
		exclude group: 'commons-logging', module: 'commons-logging'
	}
}
----

=== springIoAlternativeDependenciesCheck

This task will ensure certain dependencies are not used and suggest alternatives. For example, intead of using asm:asm
it is preferred to use spring-core's repackages asm dependencies.

=== springIoDependencyVersionMappingCheck

This task will check that every dependency in a configuration can be mapped to a dependency that's part of the
Spring IO Platform. By default, the task will perform this check against the `runtime` configuration. The build will
fail if unmapped direct dependencies are found, but unmapped transitive dependencies will not cause a failure. All
three options can be configured:

[source,groovy]
springIoDependencyVersionMappingCheck {
    configuration = configurations.testRuntime
    failOnUnmappedDirectDependency = true
    failOnUnmappedTransitiveDependency = true
}

`configuration` determines the configuration that is checked. `failOnUnmappedDirectDependency` controls whether or not
the build will fail if a direct dependency is encountered that is not part of the Spring IO plaform. The default is
`true`. `failOnUnmappedTransitiveDependency` controls whether or not the build will fail if a transitive dependency is
encountered that is not part of the Spring IO platform. The default is `false`.

==== Dealing with unmapped dependencies

If you encounter an unmapped dependency, the Platform team can help. First of all, please check for an
https://github.com/spring-io/platform/issues[existing issue]. If you find one, add a comment to note your need for the
dependency. If there is no existing issue, please https://github.com/spring-io/platform/issues/new[open one], providing
details of the dependency and the project that requires it.

